{"mappings":"YAAA,IAAAA,EAAe,CACbC,KAAMC,SAASC,cAAc,cAC7BC,SAAUF,SAASC,cAAc,eCiBxBE,EAAS,W,IAACC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,G,OAC1BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,G,GAGP,G,EC/BE,SAASG,EAAWC,GACzB,IAAMC,EAAO,CAAEN,GAAIR,KAEnB,OADA,IAAIe,SAASF,EAAEG,eAAeC,SAAQ,SAACC,EAAOC,G,OAAUL,EAAKK,GAAQD,C,IAC9DJ,C,CCJT,IAAMM,EAAc,YAOpB,SAASC,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAAQL,KAAiB,E,KCN9BM,EACpBC,EDYRC,EAAe,CAAEC,QAbjB,SAAiBC,GACf,IAAMC,EAAQV,IACdU,EAAMC,KAAKF,GACXN,aAAaS,QAAQb,EAAaE,KAAKY,UAAUH,G,EAUzBI,SAAAd,EAAUe,WALpC,SAAoB5B,GAClB,IACM6B,EADQhB,IACaiB,QAAO,SAAAC,G,OAAQA,EAAK/B,KAAOA,C,IACtDgB,aAAaS,QAAQb,EAAaE,KAAKY,UAAUG,G,GCXvBX,ECmBhBE,EAAgBO,WDlBpBR,EAASD,EACZc,KAAI,SAAAD,GACH,MAAO,4FAESE,OADwCF,EAAK/B,GAAG,4CAEjDiC,OADCF,EAAKG,SAAS,8BACDD,OAAdF,EAAKI,SAAS,8B,IAG9BC,KAAK,IACRjD,EAAKI,SAAS8C,mBAAmB,aAAclB,GCWjDhC,EAAKC,KAAKkD,iBAAiB,UCnBpB,SAAoBjC,GACzBA,EAAEkC,iBACF,ICL4BjB,EACtBH,EDIAqB,EAAUpC,EAAWC,GAC3Be,EAAgBC,QAAQmB,GCLlBrB,EAAS,kFAENc,QAHmBX,EDOdkB,GCLwCxC,GAAG,iCAEhDiC,OADAX,EAAIY,SAAS,oBACAD,OAAbX,EAAIa,SAAS,oBAGtBhD,EAAKI,SAAS8C,mBAAmB,YAAalB,GDE9Cd,EAAEG,cAAciC,O,IDclBtD,EAAKI,SAAS+C,iBAAiB,SGtBxB,SAAoBjC,GACC,WAAtBA,EAAEqC,OAAOC,UAIbvB,EAAgBQ,WAAWvB,EAAEqC,OAAOE,QAAQ5C,G","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","src/js/createNote.js","src/js/localStorageApi.js","src/js/renderNotes.js","src/index.js","src/js/submitForm.js","src/js/renderNewNote.js","src/js/deleteNote.js"],"sourcesContent":["export default {\n  form: document.querySelector('#task-form'),\n  taskList: document.querySelector('#task-list'),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nexport function createNote(e) {\n  const data = { id: nanoid() };\n  new FormData(e.currentTarget).forEach((value, name) => (data[name] = value));\n  return data;\n}\n","const STORAGE_KEY = 'notesData';\n\nfunction addNote(obj) {\n  const notes = getNotes();\n  notes.push(obj);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(notes));\n}\nfunction getNotes() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\n}\nfunction removeNote(id) {\n  const notes = getNotes();\n  const updatedNotes = notes.filter(item => item.id !== id);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedNotes));\n}\nexport default { addNote, getNotes, removeNote };\n","import refs from './refs';\n\nexport function renderNotes(arr) {\n  const markup = arr\n    .map(item => {\n      return `<li class=\"task-list-item\">\n                <button class=\"task-list-item-btn\" data-id=\"${item.id}\">Удалить</button>\n                <h3>${item.taskName}</h3>\n                <p>${item.taskText}</p>\n                </li>`;\n    })\n    .join('');\n  refs.taskList.insertAdjacentHTML('afterbegin', markup);\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport refs from './js/refs';\nimport { submitForm } from './js/submitForm';\nimport { renderNotes } from './js/renderNotes';\nimport localStorageApi from './js/localStorageApi';\nimport { deleteNote } from './js/deleteNote';\nrenderNotes(localStorageApi.getNotes());\n\nrefs.form.addEventListener('submit', submitForm);\nrefs.taskList.addEventListener('click', deleteNote);\n","import { createNote } from './createNote';\nimport localStorageApi from './localStorageApi';\nimport { renderNewNote } from './renderNewNote';\n\nexport function submitForm(e) {\n  e.preventDefault();\n  const newNote = createNote(e);\n  localStorageApi.addNote(newNote);\n  renderNewNote(newNote);\n\n  e.currentTarget.reset();\n}\n","import refs from './refs';\nexport function renderNewNote(obj) {\n  const markup = `<li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\" data-id=\"${obj.id}\">Удалить</button>\n     <h3>${obj.taskName}</h3>\n      <p>${obj.taskText}</p>\n  </li>\n `;\n  refs.taskList.insertAdjacentHTML('beforeend', markup);\n}\n","import localStorageApi from './localStorageApi';\n\nexport function deleteNote(e) {\n  if (e.target.nodeName !== 'BUTTON') {\n    return;\n  }\n\n  localStorageApi.removeNote(e.target.dataset.id);\n}\n"],"names":["$37e33676934ad046$export$2e2bcd8739ae039","form","document","querySelector","taskList","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$357086e60ec70424$export$4640c0d5ffcf906e","e","data","FormData","currentTarget","forEach","value","name","$eec03e4d3aa60e63$var$STORAGE_KEY","$eec03e4d3aa60e63$var$getNotes","JSON","parse","localStorage","getItem","arr","markup","$eec03e4d3aa60e63$export$2e2bcd8739ae039","addNote","obj","notes","push","setItem","stringify","getNotes","removeNote","updatedNotes","filter","item","map","concat","taskName","taskText","join","insertAdjacentHTML","addEventListener","preventDefault","newNote","reset","target","nodeName","dataset"],"version":3,"file":"index.6a7b4546.js.map"}