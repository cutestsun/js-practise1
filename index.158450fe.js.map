{"mappings":"AAAA,IAAAA,EAAe,CACbC,KAAMC,SAASC,cAAc,cAC7BC,SAAUF,SAASC,cAAc,eCD5B,IAkBIE,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC/BE,SAASG,EAAWC,GACzB,MAAMC,EAAO,CAAEN,GAAIN,KAInB,OAHA,IAAIa,SAASF,EAAEG,eAAeC,SAC5B,CAACC,EAAOC,IAAUL,EAAKK,GAAQD,EAAME,SAEhCN,C,CCIT,SAASO,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAXb,eAWsC,E,KAO1DC,EAAe,C,QAhBf,SAAiBC,GACf,GAAqB,KAAjBA,EAAIC,UAAoC,KAAjBD,EAAIE,SAC7B,OAEF,MAAMC,EAAQT,IACdS,EAAMC,KAAKJ,GACXH,aAAaQ,QARK,YAQgBV,KAAKW,UAAUH,G,WAUzBT,E,WAL1B,SAAoBb,GAClB,MACM0B,EADQb,IACac,QAAOC,GAAQA,EAAK5B,KAAOA,IACtDgB,aAAaQ,QAhBK,YAgBgBV,KAAKW,UAAUC,G,GCf5C,SAASG,EAAcV,GAC5B,GAAqB,KAAjBA,EAAIC,UAAoC,KAAjBD,EAAIE,SAC7B,OAAOS,MAAM,kCAEf,MAAMC,EAAS,kFACmCZ,EAAInB,kCAC7CmB,EAAIC,2BACJD,EAAIE,2BAGbhC,EAAKI,SAASuC,mBAAmB,YAAaD,E,ECTzC,SAAqBE,GAC1B,MAAMF,EAASE,EACZC,KAAIN,GACI,4FACiDA,EAAK5B,6CAC7C4B,EAAKR,qCACNQ,EAAKP,wCAGrBc,KAAK,IACR9C,EAAKI,SAASuC,mBAAmB,aAAcD,E,CCSjD,CAAYb,EAAgBkB,YAE5B/C,EAAKC,KAAK+C,iBAAiB,UCnBpB,SAAoBhC,GACzBA,EAAEiC,iBACF,MAAMC,EAAUnC,EAAWC,GAC3Ba,EAAgBsB,QAAQD,GACxBV,EAAcU,GAEdlC,EAAEG,cAAciC,O,IDclBpD,EAAKI,SAAS4C,iBAAiB,SEtBxB,SAAoBhC,GACC,WAAtBA,EAAEqC,OAAOC,WAGbtC,EAAEqC,OAAOE,QAAQ,mBAAmBC,SACpC3B,EAAgB4B,WAAWzC,EAAEqC,OAAOK,QAAQ/C,I","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","src/js/createNote.js","src/js/localStorageApi.js","src/js/renderNewNote.js","src/js/renderNotes.js","src/index.js","src/js/submitForm.js","src/js/deleteNote.js"],"sourcesContent":["export default {\n  form: document.querySelector('#task-form'),\n  taskList: document.querySelector('#task-list'),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nexport function createNote(e) {\n  const data = { id: nanoid() };\n  new FormData(e.currentTarget).forEach(\n    (value, name) => (data[name] = value.trim())\n  );\n  return data;\n}\n","const STORAGE_KEY = 'notesData';\n\nfunction addNote(obj) {\n  if (obj.taskName === '' || obj.taskText === '') {\n    return;\n  }\n  const notes = getNotes();\n  notes.push(obj);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(notes));\n}\nfunction getNotes() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\n}\nfunction removeNote(id) {\n  const notes = getNotes();\n  const updatedNotes = notes.filter(item => item.id !== id);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedNotes));\n}\nexport default { addNote, getNotes, removeNote };\n","import refs from './refs';\nexport function renderNewNote(obj) {\n  if (obj.taskName === '' || obj.taskText === '') {\n    return alert('Please, fill in the all fields');\n  }\n  const markup = `<li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\" data-id=\"${obj.id}\">Удалить</button>\n     <h3>${obj.taskName}</h3>\n      <p>${obj.taskText}</p>\n  </li>\n `;\n  refs.taskList.insertAdjacentHTML('beforeend', markup);\n}\n","import refs from './refs';\n\nexport function renderNotes(arr) {\n  const markup = arr\n    .map(item => {\n      return `<li class=\"task-list-item\">\n                <button class=\"task-list-item-btn\" data-id=\"${item.id}\">Удалить</button>\n                <h3>${item.taskName}</h3>\n                <p>${item.taskText}</p>\n                </li>`;\n    })\n    .join('');\n  refs.taskList.insertAdjacentHTML('afterbegin', markup);\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport refs from './js/refs';\nimport { submitForm } from './js/submitForm';\nimport { renderNotes } from './js/renderNotes';\nimport localStorageApi from './js/localStorageApi';\nimport { deleteNote } from './js/deleteNote';\nrenderNotes(localStorageApi.getNotes());\n\nrefs.form.addEventListener('submit', submitForm);\nrefs.taskList.addEventListener('click', deleteNote);\n","import { createNote } from './createNote';\nimport localStorageApi from './localStorageApi';\nimport { renderNewNote } from './renderNewNote';\n\nexport function submitForm(e) {\n  e.preventDefault();\n  const newNote = createNote(e);\n  localStorageApi.addNote(newNote);\n  renderNewNote(newNote);\n\n  e.currentTarget.reset();\n}\n","import localStorageApi from './localStorageApi';\n\nexport function deleteNote(e) {\n  if (e.target.nodeName !== 'BUTTON') {\n    return;\n  }\n  e.target.closest('.task-list-item').remove();\n  localStorageApi.removeNote(e.target.dataset.id);\n}\n"],"names":["$ee27a4d7c64fc8c4$export$2e2bcd8739ae039","form","document","querySelector","taskList","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$d4daa78a533cd9de$export$4640c0d5ffcf906e","e","data","FormData","currentTarget","forEach","value","name","trim","$32f32acdb3536e0f$var$getNotes","JSON","parse","localStorage","getItem","$32f32acdb3536e0f$export$2e2bcd8739ae039","obj","taskName","taskText","notes","push","setItem","stringify","updatedNotes","filter","item","$90e9b50b4104f75a$export$a4e0570285dd0bc2","alert","markup","insertAdjacentHTML","arr","map","join","getNotes","addEventListener","preventDefault","newNote","addNote","reset","target","nodeName","closest","remove","removeNote","dataset"],"version":3,"file":"index.158450fe.js.map"}